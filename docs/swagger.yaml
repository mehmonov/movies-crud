basePath: /api/v1
definitions:
  models.CreateMovieRequest:
    properties:
      director:
        type: string
      plot:
        type: string
      title:
        type: string
      year:
        maximum: 2100
        minimum: 1800
        type: integer
    required:
    - director
    - title
    - year
    type: object
  models.CreateUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Movie:
    properties:
      created_at:
        type: string
      director:
        type: string
      id:
        type: integer
      plot:
        type: string
      title:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
  models.UpdateMovieRequest:
    properties:
      director:
        type: string
      plot:
        type: string
      title:
        type: string
      year:
        maximum: 2100
        minimum: 1800
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: mehmonov.husniddin1@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample movies CRUD API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Movies CRUD API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            type: object
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Register a new user
      tags:
      - auth
  /movies:
    get:
      consumes:
      - application/json
      description: Get a list of all movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Movie'
            type: array
      summary: Get all movies
      tags:
      - movies
    post:
      consumes:
      - application/json
      description: Add a new movie to the database
      parameters:
      - description: Movie information
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.CreateMovieRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Movie'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Create a new movie
      tags:
      - movies
  /movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie from the database
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Delete a movie
      tags:
      - movies
    get:
      consumes:
      - application/json
      description: Get details of a specific movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
        "404":
          description: Not Found
          schema:
            type: object
      summary: Get a movie by ID
      tags:
      - movies
    put:
      consumes:
      - application/json
      description: Update an existing movie's details
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie information
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.UpdateMovieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
        "400":
          description: Bad Request
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Update a movie
      tags:
      - movies
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
